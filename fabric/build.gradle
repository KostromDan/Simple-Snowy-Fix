plugins {
    id 'com.github.johnrengelman.shadow'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')


    modImplementation "curse.maven:regions-unexplored-659110:5558172"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

//unifiedPublishing {
//    project {
//        gameVersions = ["1.19", "1.19.1", "1.19.2", "1.19.3", "1.19.4", "1.20", "1.20.1", "1.20.2", "1.20.3", "1.20.4", "1.20.5", "1.20.6", "1.21", "1.21.1", "1.21.2", "1.21.3", "1.21.4"]
//        gameLoaders = ["fabric", "quilt"]
//
//        displayName = tasks.remapJar.archiveFile.get().asFile.name
//        version = mod_version
//        changelog = file('../changelog.md').text
//        releaseType = release_type
//
//        mainPublication tasks.remapJar
//
//        var cfToken = System.getenv("CF_TOKEN")
//        if (cfToken != null) {
//            curseforge {
//                token = cfToken
//                id = curseforge_project_id
//            }
//        }
//
//        var mrToken = System.getenv("MODRINTH_TOKEN")
//        if (mrToken != null) {
//            modrinth {
//                token = mrToken
//                id = modrinth_project_id
//            }
//        }
//    }
//}
